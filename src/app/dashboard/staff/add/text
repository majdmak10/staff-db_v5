const [errors, setErrors] = useState<Record<string, string>>({});
  const router = useRouter();

  const validateForm = (formData: FormData) => {
    const fullName = formData.get("fullName") as string;
    const dateOfBirth = formData.get("dateOfBirth") as string;
    const sex = formData.get("sex") as string;
    const nationality = formData.get("nationality") as string;
    const employmentType = formData.get("employmentType") as string;
    const position = formData.get("position") as string;
    const unit = formData.get("unit") as string;
    const bloodType = formData.get("bloodType") as string;
    const dependents = formData.get("dependents") as string;
    const unhcrEmail = formData.get("unhcrEmail") as string;
    const privateEmail = formData.get("privateEmail") as string;
    const mobileSyriatel = formData.get("mobileSyriatel") as string;
    const mobileMtn = formData.get("mobileMtn") as string;
    const homePhone = formData.get("homePhone") as string;
    const extension = formData.get("extension") as string;
    const radio = formData.get("radio") as string;
    const emergencyContact = formData.get("emergencyContact") as string;
    const contractType = formData.get("contractType") as string;
    const contractStartDate = formData.get("contractStartDate") as string;
    const contractEndDate = formData.get("contractEndDate") as string;
    const nationalIdNumber = formData.get("nationalIdNumber") as string;
    const passportNumber = formData.get("passportNumber") as string;
    const passportExpiryDate = formData.get("passportExpiryDate") as string;
    const unlpNumber = formData.get("unlpNumber") as string;
    const unlpExpiryDate = formData.get("unlpExpiryDate") as string;
    const criticalStaff = formData.get("criticalStaff") as string;
    const warden = formData.get("warden") as string;
    const floorMarshal = formData.get("floorMarshal") as string;
    const etb = formData.get("etb") as string;
    const ifak = formData.get("ifak") as string;
    const advancedDriving = formData.get("advancedDriving") as string;
    const insideDs = formData.get("insideDs") as string;
    const outsideDs = formData.get("outsideDs") as string;
    const address = formData.get("address") as string;

    const newErrors: Record<string, string> = {};

    // Full Name validation
    if (!fullName || fullName.trim() === "") {
      newErrors.fullName = "Full Name is required";
    }

    // Sex validation
    if (!sex || sex === "") {
      newErrors.sex = "Sex is required";
    }

    // UNHCR Email validation
    const unhcrEmailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!unhcrEmail || !unhcrEmail.test(unhcrEmail)) {
      newErrors.unhcrEmail = "Valid email is required";
    }

    // Private Email validation
    const privateEmailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!privateEmail || !privateEmail.test(privateEmail)) {
      newErrors.privateEmail = "Valid email is required";
    }

    return newErrors;
  };

  const handleSubmit = async (formData: FormData) => {
    const validationErrors = validateForm(formData);

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    // Clear previous errors
    setErrors({});

    try {
      await addStaff(formData);
    } catch (error) {
      // Handle any submission errors
      console.error("Submission error:", error);
      setErrors({ submit: "Failed to add staff. Please try again." });
    }
  };